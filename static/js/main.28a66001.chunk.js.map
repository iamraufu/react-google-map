{"version":3,"sources":["components/config.js","components/Map.js","components/Direction.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","React","containerStyle","width","height","location","lat","lng","Direction","origin","destination","useState","directionResponse","setDirectionResponse","googleMapsApiKey","mapContainerStyle","center","zoom","options","travelMode","callback","res","directions","memo","App","setOrigin","setDestination","className","type","placeholder","onBlur","e","target","value","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAaA,EAAU,0C,aCoCRC,ICjCTC,EAAiB,CACjBC,MAAO,OACPC,OAAQ,SAGRC,EAAW,CACXC,IAAK,SACLC,IAAK,WAGX,SAASC,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,OAAOC,EAAc,EAAdA,YAAc,EACeC,mBAAS,MADxB,mBAC5BC,EAD4B,KACTC,EADS,KAEnC,OACM,cAAC,IAAD,CACMC,iBAAkBd,EADxB,SAGM,eAAC,IAAD,CACMe,kBAAmBb,EACnBc,OAAQX,EACRY,KAAM,GAHZ,UAKiB,KAAVR,GAA+B,KAAfC,GAAqB,cAAC,IAAD,CAChCQ,QAAS,CACHR,YAAaD,EACbA,OAAQC,EACRS,WAAY,WAElBC,SAAU,SAAAC,GACQ,OAARA,GACER,EAAqBQ,MAItCT,GAAqB,cAAC,IAAD,CAChBM,QAAS,CACHI,WAAYV,UAQjCX,UAAMsB,KAAKf,GC1BXgB,MAff,WAAgB,IAAD,EACcb,mBAAS,IADvB,mBACNF,EADM,KACCgB,EADD,OAEwBd,mBAAS,IAFjC,mBAEND,EAFM,KAEMgB,EAFN,KAGb,OACE,sBAAKC,UAAU,MAAf,UAEE,uBAAOC,KAAK,OAAOC,YAAY,iBAAiBC,OAAU,SAAAC,GAAC,OAAEN,EAAUM,EAAEC,OAAOC,UAChF,uBAAOL,KAAK,OAAOC,YAAY,cAAcC,OAAU,SAAAC,GAAC,OAAEL,EAAeK,EAAEC,OAAOC,UAClF,uBACA,uBAAOC,MAAO,CAACC,MAAM,SAArB,iDACA,cAAC,EAAD,CAAW1B,OAAQA,EAAQC,YAAaA,QCH/B0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.28a66001.chunk.js","sourcesContent":["export const API_KEY = 'AIzaSyA7LhjV6Wv82v1ioXeMnemjP_L0eCflJYk'","import React from 'react'\r\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\r\nimport {API_KEY} from './config'\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '100vh'\r\n};\r\n\r\nconst location = {\r\n  lat: 23.767110,\r\n  lng: 90.421182\r\n};\r\n\r\nconst onLoad = marker => {\r\n      console.log('marker: ', marker)\r\n    }\r\n\r\nfunction Map() {\r\n  return (\r\n    <LoadScript\r\n      googleMapsApiKey={API_KEY}\r\n    >\r\n      <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={location}\r\n        zoom={14}\r\n      >\r\n            <Marker\r\n      onLoad={onLoad}\r\n      position={location}\r\n    />\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  )\r\n}\r\n\r\nexport default React.memo(Map)","import React, { useState } from 'react'\r\nimport { DirectionsRenderer, DirectionsService, GoogleMap, LoadScript } from '@react-google-maps/api';\r\nimport { API_KEY } from './config'\r\nconst containerStyle = {\r\n      width: '100%',\r\n      height: '100vh'\r\n};\r\n\r\nconst location = {\r\n      lat: 23.767110,\r\n      lng: 90.421182\r\n};\r\n\r\nfunction Direction({origin,destination}) {\r\n      const [directionResponse, setDirectionResponse] = useState(null);\r\n      return (\r\n            <LoadScript\r\n                  googleMapsApiKey={API_KEY}\r\n            >\r\n                  <GoogleMap\r\n                        mapContainerStyle={containerStyle}\r\n                        center={location}\r\n                        zoom={14}\r\n                  >\r\n                        {origin !=='' && destination !=='' && <DirectionsService\r\n                              options={{\r\n                                    destination: origin,\r\n                                    origin: destination,\r\n                                    travelMode: 'DRIVING'\r\n                              }}\r\n                              callback={res => {\r\n                                    if (res !== null) {\r\n                                          setDirectionResponse(res);\r\n                                    }\r\n                              }}\r\n                        />}\r\n                        {directionResponse && <DirectionsRenderer\r\n                              options={{\r\n                                    directions: directionResponse\r\n                              }}\r\n                        />}\r\n                  </GoogleMap>\r\n            </LoadScript>\r\n      )\r\n}\r\n\r\nexport default React.memo(Direction)","import Map from './components/Map';\nimport './App.css';\nimport Direction from './components/Direction';\nimport { useState } from 'react';\n\nfunction App() {\n  const [origin,setOrigin] = useState('');\n  const [destination,setDestination] = useState('');\n  return (\n    <div className=\"App\">\n      {/* <Map></Map> */}\n      <input type=\"text\" placeholder=\"Starting Point\" onBlur = {e=>setOrigin(e.target.value)}/>\n      <input type=\"text\" placeholder=\"Destination\" onBlur = {e=>setDestination(e.target.value)}/>\n      <br/>\n      <small style={{color:'green'}}>*Free Version Doesn't Support Route</small>\n      <Direction origin={origin} destination={destination}></Direction>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}